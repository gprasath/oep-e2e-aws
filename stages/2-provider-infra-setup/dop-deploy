#!/bin/bash
set -ex

######################
##   Prerequisites  ##
######################
mkdir ~/.kube
cp  .kube/config ~/.kube/config
kubectl get node -o wide
kubectl get po

job_id=$(echo $CI_JOB_ID)
gittoken=$(echo "$GITHUB_TOKEN")
current_time=$(date)
branch_name=$CI_COMMIT_REF_NAME
test_name="TCID-DIR-INSTALL-ON-LOCAL-HP"
stage="INFRA-SETUP"
test_desc="Install DOP using helm with SSD underneath"


IP=$(kubectl get nodes -o wide --no-headers | grep node | awk {'print $7'} | head -n 1)
URL=http://$IP
echo "URL to access DOP: $URL"

# Create a configmap from URL
kubectl create configmap config --from-literal=url=$URL -n litmus
touch .kube/url
echo $URL > .kube/url

#Configuring Helm
wget https://get.helm.sh/helm-v2.16.7-linux-amd64.tar.gz
tar -zxvf helm-v2.16.7-linux-amd64.tar.gz
mv linux-amd64/helm /usr/local/bin/helm
echo $HELM_RBAC > HELM_RBAC.yaml

helm init
sleep 45
helm version

######################
##    Deploy DOP    ##
######################

echo "deploying DOP" 

echo -e "\n[ Cloning director-charts-internal repo ]--------------------\n"
git clone https://$username:$password@github.com/mayadata-io/director-charts-internal.git

cd director-charts-internal

echo "\n[ Get DOP release version ]-------------------------------------\n"
cd "$RELEASE"/director

# Create secret having maya-init repo access
kubectl create secret docker-registry directoronprem-registry-secret --docker-server=registry.mayadata.io --docker-username=$RELEASE_USERNAME --docker-password=$RELEASE_PASSWORD

# Create clusterrolebinding
kubectl create clusterrolebinding kube-admin --clusterrole cluster-admin --serviceaccount=kube-system:default

# Add DOP URL
sed 's|url:|url: '${IP}'|' -i ./values.yaml
sed 's|storageClass: standard|storageClass: gp2|' -i ./values.yaml
cat values.yaml

# Apply helm chart
helm install --name dop .

echo -e "\n************************ Installing litmus pre-requisites *****************************\n"
git clone https://$username:$password@github.com/mayadata-io/oep-e2e.git
# Setup litmus on the cluster
kubectl apply -f oep-e2e/litmus/prerequisite/rbac.yaml
kubectl apply -f oep-e2e/litmus/prerequisite/crds.yaml
# creating docker secret 
kubectl apply -f oep-e2e/litmus/prerequisite/docker-secret.yml -n litmus
## Installing heapster components on the cluster for node monitoring
wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.6/components.yaml
sed -i -e '/args:/ a\          - --kubelet-insecure-tls' components.yaml
sed -i -e '/args:/ a\          - --metric-resolution=30s' components.yaml
sed -i -e '/args:/ a\          - --requestheader-allowed-names=aggregator' components.yaml
sed -i -e '/args:/ a\          - --kubelet-preferred-address-types=InternalIP' components.yaml

kubectl apply -f components.yaml
sleep 300
kubectl get po
kubectl get po -n kube-system
kubectl get po -n maya-system

echo -e "\n************************ Running basic-sanity checks **********************************\n"

bash oep-e2e/scripts/director-health-check.sh

# If any of the above check fails, then fail this job
if [ $(cat result.txt | grep -ic fail) != 0 ];then
  testResult="Fail"
  echo -e "\nTest Result: $testResult\n"
  if [[ $branch_name == "oep-release" ]]; then
    python3.7 oep-e2e/utils/result_update.py --job_id "$job_id" --stage "$stage" --test_desc "$test_desc" --test_result "$testResult" --time_stamp "$current_time" --token "$gittoken" --test_name "$test_name" --job_name "$test_name" --platform "aws"
  fi
  exit 1
else
  testResult="Pass"
  echo -e "\nTest Result: $testResult\n"
  if [[ $branch_name == "oep-release" ]]; then
    python3.7 oep-e2e/utils/result_update.py --job_id "$job_id" --stage "$stage" --test_desc "$test_desc" --test_result "$testResult" --time_stamp "$current_time" --token "$gittoken" --test_name "$test_name" --job_name "$test_name" --platform "aws"
  fi
fi
